        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 9 returned 100% blocks executed 70%
        9:   25:pair<int, int> collatz_read (const string& s) {
        9:   26:    istringstream sin(s);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        -:   27:    int i;
        -:   28:    int j;
        9:   29:    sin >> i >> j;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
        9:   30:    return make_pair(i, j);}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
call    5 never executed
        -:   31:
        -:   32:// ------------
        -:   33:// collatz_eval
        -:   34:// ------------
        -:   35:
function _Z12collatz_evalii called 10 returned 100% blocks executed 100%
       10:   36:int collatz_eval (int i, int j) {
        -:   37:    // <your code>
       10:   38:    int steps = 1;
       10:   39:    int max = 0;
  1000455:   40:    for(int start = i; start <= j; start++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1000445:   41:	int k = start;
  1000445:   42:	steps = 1;
133387039:   43:	while(k > 1){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
131386149:   44:	    if(k % 2 == 0){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
 87793064:   45:		k = k / 2;
        -:   46:	    } else {
 43593085:   47:		k = 3*k + 1;
        -:   48:	    }
131386149:   49:	    steps++;
        -:   50:	}
  1000445:   51:	if(steps > max)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       85:   52:	    max = steps;
        -:   53:    }    
       10:   54:    return max;
        -:   55:
        -:   56://return 1;
        -:   57:}
        -:   58:
        -:   59:
        -:   60:// -------------
        -:   61:// collatz_print
        -:   62:// -------------
        -:   63:
function _Z13collatz_printRSoiii called 9 returned 100% blocks executed 100%
        9:   64:void collatz_print (ostream& w, int i, int j, int v) {
        9:   65:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   66:
        -:   67:// -------------
        -:   68:// collatz_solve
        -:   69:// -------------
        -:   70:
function _Z13collatz_solveRSiRSo called 3 returned 100% blocks executed 73%
        3:   71:void collatz_solve (istream& r, ostream& w) {
        3:   72:    string s;
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
       12:   73:    while (getline(r, s)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0% (throw)
call    5 returned 100%
branch  6 taken 67%
branch  7 taken 33% (fallthrough)
        6:   74:        const pair<int, int> p = collatz_read(s);
branch  0 taken 100% (fallthrough)
branch  1 taken 0% (throw)
call    2 returned 100%
        6:   75:        const int            i = p.first;
        6:   76:        const int            j = p.second;
        6:   77:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       12:   78:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0% (throw)
call    7 returned 100%
call    8 returned 100%
call    9 never executed
call   10 never executed
